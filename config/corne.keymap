/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        Esc_Key {
            bindings = <&kp ESCAPE>;
            key-positions = <14 15>;
        };

        Print_Screen {
            bindings = <&kp RC(PRINTSCREEN)>;
            key-positions = <38 17>;
        };

        Enter_Key {
            bindings = <&kp ENTER>;
            key-positions = <15 16>;
        };

        bluetooth_Layer {
            bindings = <&mo 1>;
            key-positions = <7 8 9>;
        };

        Comma {
            bindings = <&kp COMMA>;
            key-positions = <2 3>;
        };

        S_Underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <3 4>;
        };

        S_Question_Mark {
            bindings = <&kp QMARK>;
            key-positions = <3 16>;
        };

        Ampersand {
            bindings = <&kp AMPERSAND>;
            key-positions = <15 28>;
        };

        Pipe {
            bindings = <&kp PIPE>;
            key-positions = <16 29>;
        };

        Duble_Quotes {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <14 16>;
        };

        Single_Quote {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <15 17>;
        };

        Semicolon {
            bindings = <&kp SEMICOLON>;
            key-positions = <2 4>;
        };

        Exclamaion {
            bindings = <&kp EXCLAMATION>;
            key-positions = <13 14>;
        };

        Minus {
            bindings = <&kp COLON>;
            key-positions = <27 28>;
        };

        Period {
            bindings = <&kp PERIOD>;
            key-positions = <2 3 4>;
        };

        Enter_R {
            bindings = <&mt LS(LCTRL) ENTER>;
            key-positions = <19 20>;
        };

        Esc_R {
            bindings = <&mt LA(LCTRL) ESC>;
            key-positions = <20 21>;
        };

        Alt {
            bindings = <&kp LEFT_ALT>;
            key-positions = <37 28>;
        };

        Home_L {
            bindings = <&kp HOME>;
            key-positions = <37 29>;
        };

        Lan {
            bindings = <&kp F18>;
            key-positions = <38 39>;
        };

        SemiColon_R {
            bindings = <&kp SEMICOLON>;
            key-positions = <32 33>;
        };

        Fast_Type {
            bindings = <&kp F13>;
            key-positions = <37 40>;
        };

        Mirror_Right_Side {
            bindings = <&mo 7>;
            key-positions = <37 38>;
        };

        Caps_Word_Behavior {
            bindings = <&caps_word>;
            key-positions = <5 6>;
        };

        LineMove {
            bindings = <&mo 6>;
            key-positions = <13 38>;
        };

        Tab_L {
            bindings = <&kp TAB>;
            key-positions = <16 17>;
        };

        Tab_R {
            bindings = <&kp TAB>;
            key-positions = <18 19>;
        };

        Alt+Shift {
            bindings = <&mt LA(LEFT_SHIFT) GRAVE>;
            key-positions = <19 21>;
        };

        Shift+Alt+Ctrl {
            bindings = <&kp LS(LC(LEFT_ALT))>;
            key-positions = <19 20 21>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <2 15>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <4 17>;
        };

        Scave {
            bindings = <&kp LC(S)>;
            key-positions = <12 14>;
        };

        Refresh {
            bindings = <&kp F5>;
            key-positions = <26 27>;
        };

        Close {
            bindings = <&kp LC(W)>;
            key-positions = <4 5>;
        };

        Save {
            bindings = <&kp LC(S)>;
            key-positions = <15 14 16>;
        };
    };

    behaviors {
        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            tapping-term-ms = <140>;
            flavor = "balanced";
        };

        prent_Dance: prent_Dance {
            compatible = "zmk,behavior-tap-dance";
            label = "PRENT_DANCE";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS>, <&kp RIGHT_PARENTHESIS>;

            tapping-term-ms = <220>;
        };

        brace_Dance: brace_Dance {
            compatible = "zmk,behavior-tap-dance";
            label = "BRACE_DANCE";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE>, <&kp RIGHT_BRACE>;

            tapping-term-ms = <220>;
        };

        bracket_Dance: bracket_Dance {
            compatible = "zmk,behavior-tap-dance";
            label = "BRACKET_DANCE";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;

            tapping-term-ms = <220>;
        };

        fast_Layer_Switch: fast_Layer_Switch {
            compatible = "zmk,behavior-hold-tap";
            label = "FAST_LAYER_SWITCH";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 40 41 39>;
            tapping-term-ms = <55>;
            flavor = "balanced";
        };

        Symbols_behavior: Symbols_behavior {
            compatible = "zmk,behavior-hold-tap";
            label = "SYMBOLS_BEHAVIOR";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "balanced";
        };

        alt_behavior: alt_behavior {
            compatible = "zmk,behavior-hold-tap";
            label = "ALT_BEHAVIOR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <130>;
            flavor = "balanced";
        };

        ctrl_behavior: ctrl_behavior {
            compatible = "zmk,behavior-hold-tap";
            label = "CTRL_BEHAVIOR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <130>;
            flavor = "balanced";
        };

        shift_behavior: shift_behavior {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_BEHAVIOR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <130>;
            flavor = "balanced";
        };
    };

    macros {
        ContextMenu: ContextMenu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(F10)>, <&macro_wait_time 55>, <&kp HOME>;

            label = "CONTEXTMENU";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            display-name = "Base";
            bindings = <
&mt LEFT_WIN TAB  &kp Q           &kp W                  &kp E  &kp R                     &kp T                       &kp Y            &kp U                      &kp I         &kp O            &kp P                    &kp HOME
&kp LCTRL         &lt 3 A         &Symbols_behavior 2 S  &kp D  &kp F                     &ctrl_behavior LCTRL G      &kp H            &hmr LEFT_SHIFT J          &hmr LCTRL K  &hmr LEFT_ALT L  &hmr LEFT_WIN SEMICOLON  &kp SINGLE_QUOTE
&kp LSHIFT        &mt LEFT_WIN Z  &mt F1 X               &kp C  &alt_behavior LEFT_ALT V  &shift_behavior LSHIFT B    &kp N            &kp M                      &kp COMMA     &kp DOT          &kp FSLH                 &kp ENTER
                                                         &mo 4  &kp SPACE                 &kp F22                     &lt 3 BACKSPACE  &Symbols_behavior 2 SPACE  &lt 4 DELETE
            >;
        };

        Bluetooth {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            display-name = "Lower";
            bindings = <
&none  &none         &none         &none         &none         &none           &none  &none  &none       &none  &none  &none
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &none  &none  &none       &none  &none  &none
&none  &none         &none         &none         &none         &none           &none  &none  &none       &none  &none  &none
                                   &none         &none         &none           &none  &none  &bt BT_CLR
            >;
        };

        Symbol {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            display-name = "Raise";
            bindings = <
&kp TAB         &kp LESS_THAN  &kp EXCLAMATION    &kp EQUAL     &kp PLUS      &kp MINUS         &kp COLON             &kp LESS_THAN  &kp EQUAL  &kp GREATER_THAN  &kp TILDE       &kp CARET
&kp LC(S)       &kp COLON      &kp SEMICOLON      &prent_Dance  &brace_Dance  &bracket_Dance    &kp NON_US_BACKSLASH  &kp AMPERSAND  &kp PIPE   &kp SLASH         &kp UNDERSCORE  &none
&kp LEFT_SHIFT  &kp SQT        &kp DOUBLE_QUOTES  &kp GRAVE     &kp DOLLAR    &kp AT_SIGN       &kp PERCENT           &kp HASH       &trans     &trans            &kp QUESTION    &none
                                                  &kp HASH      &trans        &kp PERCENT       &trans                &trans         &trans
            >;
        };

        Arrow {
            bindings = <
&trans  &kp C_VOLUME_UP    &kp HOME  &kp UP     &kp END                                    &kp LC(HOME)                                 &kp PAGE_UP         &kp HOME        &kp UP_ARROW    &kp END    &kp C_VOLUME_UP    &none
&trans  &kp C_VOLUME_DOWN  &kp LEFT  &kp DOWN   &kp RIGHT                                  &ctrl_behavior LCTRL LC(END)                 &kp PAGE_DOWN       &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT  &kp C_VOLUME_DOWN  &none
&trans  &kp C_MUTE         &none     &none      &shift_behavior LEFT_SHIFT K_CONTEXT_MENU  &shift_behavior LEFT_SHIFT K_CONTEXT_MENU    &kp K_CONTEXT_MENU  &ContextMenu    &none           &none      &kp C_MUTE         &none
                                     &kp LCTRL  &kp LEFT_SHIFT                             &kp LEFT_ALT                                 &kp LEFT_ALT        &kp LEFT_SHIFT  &kp LCTRL
            >;
        };

        Number {
            bindings = <
&mt LEFT_WIN TAB      &kp N0          &kp N9                        &kp N8     &kp N7             &kp N6          &kp COLON     &kp LESS_THAN        &kp EQUAL        &kp GREATER_THAN    &kp HASH            &trans
&mt LCTRL ASTERISK    &lt 3 NUMBER_1  &Symbols_behavior 2 NUMBER_2  &kp N3     &kp N4             &kp NUMBER_5    &kp ASTERISK  &mt LEFT_SHIFT PLUS  &mt LCTRL MINUS  &mt LEFT_ALT SLASH  &mt LEFT_WIN SLASH  &trans
&mt LEFT_SHIFT SLASH  &lt 5 Z         &kp ASTERISK                  &kp MINUS  &mt LEFT_ALT PLUS  &kp EQUAL       &kp PERCENT   &bracket_Dance       &trans           &trans              &trans              &trans
                                                                    &trans     &trans             &kp PERCENT     &trans        &trans               &trans
            >;
        };

        FKey {
            bindings = <
&trans  &kp F10  &kp F9  &kp F8  &kp F7  &kp F6    &none   &kp F20  &kp F19  &kp F18  &kp F17  &kp F16
&trans  &kp F1   &kp F2  &kp F3  &kp F4  &kp F5    &none   &kp F11  &kp F12  &kp F13  &kp F14  &kp F15
&trans  &trans   &trans  &trans  &trans  &trans    &trans  &kp F21  &kp F22  &kp F23  &kp F24  &trans
                         &trans  &trans  &trans    &trans  &trans   &trans
            >;
        };

        Move_Line {
            bindings = <
&none  &none  &kp HOME  &kp LA(UP)    &kp END    &kp LC(HOME)    &kp LC(HOME)  &kp HOME  &kp LA(UP)    &kp END    &none  &none
&none  &none  &kp LEFT  &kp LA(DOWN)  &kp RIGHT  &kp LC(END)     &kp LC(END)   &kp LEFT  &kp LA(DOWN)  &kp RIGHT  &none  &none
&none  &none  &none     &none         &none      &none           &none         &none     &none         &none      &none  &none
                        &none         &none      &none           &none         &none     &none
            >;
        };

        layer_7 {
            bindings = <
&trans  &kp P           &kp O    &kp I      &kp U                     &kp Y                           &none  &none  &none  &none  &none  &none
&trans  &kp SEMI        &kp L    &kp K      &kp J                     &ctrl_behavior LCTRL H          &none  &none  &none  &none  &none  &none
&trans  &mt LWIN SLASH  &kp DOT  &kp COMMA  &alt_behavior LEFT_ALT M  &shift_behavior LEFT_SHIFT N    &none  &none  &none  &none  &none  &none
                                 &trans     &trans                    &trans                          &none  &none  &none
            >;
        };
    };
};
